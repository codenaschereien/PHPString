<?php

require_once 'PHPUnit/Autoload.php';

require_once dirname(__FILE__) . '/../String.php';

/**
 * Test class for String.
 * Generated by PHPUnit on 2011-11-19 at 18:31:43.
 */
class StringTest extends PHPUnit_Framework_TestCase {

  /**
   * @var String
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->object = new String;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  public function testGetValue() {
    $rawString = 'This is a string!';
    $string = new String($rawString);
    $this->assertInternalType('string', $string->getValue());
    $this->assertEquals($rawString, $string->getValue());
  }

  public function testSetValue() {
    $rawString = 'This is a string!';
    $string = new String();
    $string->setValue($rawString);
    $this->assertAttributeEquals($rawString, 'value', $string);
  }

  public function testGetEncoding() {
    $encoding = 'UTF-8';
    $string = new String('This is a string', $encoding);
    $this->assertEquals($encoding, $string->getEncoding());
  }

  public function testSetEncoding() {
    $string = new String('This is a string');
    $this->assertEquals($string->getDefaultEncoding(), $string->getEncoding());
  }

  public function testGetLength() {
    $string = new String('öüä€test');
    $this->assertFalse(0 === $string->getLength());
    $this->assertFalse(7 === $string->getLength());
    $this->assertEquals(8, $string->getLength());
  }

  public function testGetIterator() {
    $string = new String('This is a string');
    $this->assertInstanceOf('Iterator', $string->getIterator());
  }

  public function testOffsetExists() {
    $string = new String('öäü€test');
    $this->assertTrue($string->offsetExists(0));
    $this->assertTrue($string->offsetExists(7));
    $this->assertFalse($string->offsetExists(8));
    $this->assertFalse($string->offsetExists(-1));
  }

  public function testOffsetGet() {
    $string = new String('öäü€test');
    $this->assertEquals('ö', $string->offsetGet(0));
    $this->assertEquals('ä', $string->offsetGet(1));
    $this->assertEquals('€', $string->offsetGet(3));
    $this->assertEquals('t', $string->offsetGet(7));
  }

  public function testOffsetSet() {
    $string = new String('öäü€test');
    $string->offsetSet(0, 'Ö');
    $this->assertEquals('Ö', $string->offsetGet(0));
    $string->offsetSet(1, 'Ä');
    $this->assertEquals('Ä', $string->offsetGet(1));
    $string->offsetSet(3, 'E');
    $this->assertEquals('E', $string->offsetGet(3));
    $string->offsetSet(7, 'T');
    $this->assertEquals('T', $string->offsetGet(7));
  }

  public function testOffsetUnset() {
    $string = new String('öäü€test');
    $string->offsetUnset(0);
    $this->assertEquals('äü€test', $string->getValue());
    
    $string = new String('öäü€test');
    $string->offsetUnset(3);
    $this->assertEquals('öäütest', $string->getValue());
    
    $string = new String('öäü€test');
    $string->offsetUnset(7);
    $this->assertEquals('öäü€tes', $string->getValue());
  }

  public function testInsert() {
    $string = new String('öäütest');
    $this->assertEquals('€öäütest', $string->insert('€', 0)->getValue());
    
    $string = new String('öäütest');
    $this->assertEquals('ö€äütest', $string->insert('€', 1)->getValue());
    
    $string = new String('öäütest');
    $this->assertEquals('öäü€test', $string->insert('€', 3)->getValue());
    
    $string = new String('öäütest');
    $this->assertEquals('öäütes€t', $string->insert('€', 6)->getValue());
    
    $string = new String('öäütest');
    $this->assertEquals('öäütest€', $string->insert('€', 7)->getValue());
    
    $string = new String('öäütest');
    $this->assertEquals('€äütest', $string->insert(
      '€', 
      0, 
      String::OVERWRITE_FOLLING_CHARACTERS)->getValue()
    );
    
    $string = new String('öäütest');
    $this->assertEquals('ö€ütest', $string->insert(
      '€', 
      1, 
      String::OVERWRITE_FOLLING_CHARACTERS)->getValue()
    );
    
    $string = new String('öäütest');
    $this->assertEquals('öäü€est', $string->insert(
      '€', 
      3, 
      String::OVERWRITE_FOLLING_CHARACTERS)->getValue()
    );
    
    $string = new String('öäütest');
    $this->assertEquals('öäütes€', $string->insert(
      '€', 
      6, 
      String::OVERWRITE_FOLLING_CHARACTERS)->getValue()
    );
    
    $string = new String('öäütest');
    $this->assertEquals('öäütest€', $string->insert(
      '€', 
      7, 
      String::OVERWRITE_FOLLING_CHARACTERS)->getValue()
    );
    
    $string = new String('öäütest');
    $this->assertEquals('öäütes€€€', $string->insert(
      '€€€', 
      6, 
      String::OVERWRITE_FOLLING_CHARACTERS)->getValue()
    );
  }

  public function testAppend() {
    $string = new String('öäü€test');
    $this->assertEquals('öäü€test€€€', $string->append('€€€'));
  }

  public function testCountBytes() {
    //using one-, two- and three-byte letters
    $string = new String('öäü€test');
    $this->assertEquals(13, $string->countBytes());
  }

  public function testGetBytes() {
    $string = new String('öäü€test');
    $this->assertInternalType('array', $string->getBytes());
    $bytes = array(
      chr(195),
      chr(182),
      chr(195),
      chr(164),
      chr(195),
      chr(188),
      chr(226),
      chr(130),
      chr(172), 
      't', 
      'e', 
      's', 
      't'
    );
    $this->assertEquals($bytes, $string->getBytes());
  }

  public function test__toString() {
    $rawString = 'This is a string!';
    $string = new String($rawString);
    $this->assertInternalType('string', $string->__toString());
    $this->assertEquals($rawString, $string->__toString());
  }

  public function testLpad() {
    $rawString = 'This is a string!';
    $string = new String($rawString);
    $string->lpad(20, '€');
    $this->assertEquals('€€€' . $rawString, $string->__toString());
  }

  public function testRpad() {
    $rawString = 'This is a string!';
    $string = new String($rawString);
    $string->rpad(20, '€');
    $this->assertEquals($rawString . '€€€', $string->__toString());
  }
  
  public function testMpad() {
    //test with even length of 16
    $rawString = 'This is a string';
    $string = new String($rawString);
    $string->mpad(20, '€');
    $this->assertEquals('€€' . $rawString . '€€', $string->__toString());
    
    //test with odd length of 17
    $rawString = 'This is a string!';
    $string = new String($rawString);
    $string->mpad(20, '€');
    $this->assertEquals('€' . $rawString . '€€', $string->__toString());
  }

  public function testStartsWith() {
    $string = new String('öäü€test');
    $this->assertTrue($string->startsWith('öäü'));
  }

  public function testEndsWith() {
    $string = new String('öäü€');
    $this->assertTrue($string->endsWith('€'));
  }

  public function testDetectLineBreaks() {
    $string = new String("This is a string\n with unix \nline breaks");
    $this->assertEquals("\n", $string->detectLineBreaks());
    
    $string = new String("This is a string\r with mac \rline breaks");
    $this->assertEquals("\r", $string->detectLineBreaks());
    
    $string = new String("This is a string\r\n with windows \r\nline breaks");
    $this->assertEquals("\r\n", $string->detectLineBreaks());
  }

  public function testNormalizeLineBreaks() {
    $string = new String("This is a string\n with unix \nline breaks");
    $string->normalizeLineBreaks(String::LINE_ENDING_N);
    $this->assertEquals("\n", $string->detectLineBreaks());
    
    $string = new String("This is a string\r with mac \rline breaks");
    $string->normalizeLineBreaks(String::LINE_ENDING_R);
    $this->assertEquals("\r", $string->detectLineBreaks());
    
    $string = new String("This is a string\r\n with windows \r\nline breaks");
    $string->normalizeLineBreaks(String::LINE_ENDING_RN);
    $this->assertEquals("\r\n", $string->detectLineBreaks());
  }

  public function testWordwrap() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  public function testSetDefaultEncoding() {
    String::setDefaultEncoding('ISO-8859-1');
    $this->assertAttributeEquals('ISO-8859-1', 'defaultEncoding','String');
    String::setDefaultEncoding('UTF-8');
    $this->assertAttributeEquals('UTF-8', 'defaultEncoding','String');
  }

  public function testGetDefaultEncoding() {
    String::setDefaultEncoding('ISO-8859-1');
    $this->assertEquals('ISO-8859-1', String::getDefaultEncoding());
    String::setDefaultEncoding('UTF-8');
    $this->assertEquals('UTF-8', String::getDefaultEncoding());
  }

  public function testFactory() {
    $rawString = 'This is a string!';
    $encoding = 'ISO-8859-1';
    $string = String::factory($rawString, $encoding);
    $this->assertInstanceOf('String', $string);
    $this->assertEquals($encoding, $string->getEncoding());
    $this->assertEquals($rawString, $string->getValue());
  }

}

